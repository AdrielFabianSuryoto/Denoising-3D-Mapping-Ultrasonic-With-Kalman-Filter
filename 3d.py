import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Data
data = [
    (0, 40, 0), (5, 40, 0), (10, 40, 1), (15, 40, 2), (20, 40, 2), (25, 40, 2), (30, 40, 2), (35, 40, 4),
    (0, 50, 4), (0, 50, 3), (5, 50, 3), (10, 50, 3), (15, 50, 3), (20, 50, 3), (25, 50, 3), (30, 50, 3), (35, 50, 4),
    (0, 60, 4), (0, 60, 4), (5, 60, 4), (10, 60, 4), (15, 60, 4), (20, 60, 4), (25, 60, 10), (30, 60, 8), (35, 60, 6),
    (0, 70, 6), (0, 70, 6), (5, 70, 6), (10, 70, 9), (15, 70, 16), (20, 70, 12), (25, 70, 10), (30, 70, 14), (35, 70, 16),
    (0, 80, 14), (0, 80, 12), (5, 80, 11), (10, 80, 10), (15, 80, 9), (20, 80, 10), (25, 80, 10), (30, 80, 11), (35, 80, 12),
    (0, 90, 10), (0, 90, 10), (5, 90, 9), (10, 90, 9), (15, 90, 8), (20, 90, 8), (25, 90, 8), (30, 90, 8), (35, 90, 8),
    (0, 100, 8), (0, 100, 8), (5, 100, 8), (10, 100, 8), (15, 100, 8), (20, 100, 8), (25, 100, 8), (30, 100, 9), (35, 100, 9),
    (0, 110, 17), (0, 110, 23), (5, 110, 26), (10, 110, 19), (15, 110, 15), (20, 110, 11), (25, 110, 10), (30, 110, 11), (35, 110, 9),
    (0, 120, 8), (0, 120, 7), (5, 120, 7), (10, 120, 8), (15, 120, 8), (20, 120, 15), (25, 120, 21), (30, 120, 15), (35, 120, 14),
    (0, 130, 10), (0, 130, 8), (5, 130, 7), (10, 130, 6), (15, 130, 5), (20, 130, 5), (25, 130, 5), (30, 130, 5), (35, 130, 5),
    (0, 140, 4), (0, 140, 4), (5, 140, 4), (10, 140, 4), (15, 140, 4), (20, 140, 4), (25, 140, 4), (30, 140, 4), (35, 140, 3),
    (0, 150, 3), (0, 150, 3), (5, 150, 3), (10, 150, 3), (15, 150, 3), (20, 150, 3), (25, 150, 3), (30, 150, 3), (35, 150, 3),
    (0, 160, 3), (0, 160, 3), (5, 160, 3), (10, 160, 3), (15, 160, 3), (20, 160, 3), (25, 160, 2), (30, 160, 2), (35, 160, 2),
]

# Extracting x, y, and z values
x = [item[1] for item in data]
y = [item[0] for item in data]
z = [item[2] for item in data]

X, Y = np.meshgrid(np.unique(x), np.unique(y))
Z = np.zeros_like(X)

# Populate Z values based on the provided data
for i in range(len(data)):
    xi = data[i][1]
    yi = data[i][0]
    zi = data[i][2]
    idx_x = np.where(np.unique(x) == xi)[0][0]
    idx_y = np.where(np.unique(y) == yi)[0][0]
    Z[idx_y, idx_x] = zi

# Plotting the 3D contour plot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.contour3D(X, Y, Z, 50, cmap='viridis')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')
ax.set_title('3D Contour Plot')

plt.show()